package quadraticEquatationTests;

import static org.junit.Assert.*;

import org.junit.AfterClass;
import org.junit.Before;
import org.junit.Test;
import quadraticEquatation.DivExeption;
import quadraticEquatation.Solving;


public class SolvingTests {
	
	private static Solving solving = new Solving();
	
	@Before
	public void before() {
	      System.out.println("Before test done");
	      solving = new Solving();
	      }
	
	@Test(expected = DivExeption.class)
	public void testDivByZero() throws DivExeption {
		double exp[] = new double[]{-1.0, -2.0};
		double act[] = solving.solvingEquatution(0.0,9.0,6.0,9.0);
		assertArrayEquals(exp, act, 0.0);}
	
	@Test(expected = DivExeption.class)
	public void testDivisionByZero() throws DivExeption {
		double k = solving.solvingEquatution(0.0,5.0);
		assertEquals(8.0, k,0.0);}

	@Test
	public void testSolvingEquatution() throws DivExeption {
		
		double exp[] = new double[]{-1.0, -2.0};
		double act[] = solving.solvingEquatution(3.0,9.0,6.0,9.0);
		assertArrayEquals(exp, act, 0.0);}

	@Test
	public void testSolvingEquatutionWithZeroDisk() throws DivExeption {
		assertEquals(0.0, solving.solvingEquatution(1.0,0.0), 0.0);
		assertEquals(2.0, solving.solvingEquatution(-2.0,8.0), 0.0);
		assertEquals(3.0, solving.solvingEquatution(3.0,-18.0), 0.0);
		assertEquals(-1.0, solving.solvingEquatution(1.0,2.0), 0.0);
		assertEquals(-Double.MAX_VALUE, solving.solvingEquatution(0.5, Double.MAX_VALUE), 0.0);}
	
	@AfterClass
    public static void afterClass() {
		double exp[] = null;
		double act[] = null;
		System.out.println("AfterClass test done, we have " + exp + " and only " + act + " in memory :)");
		}
}